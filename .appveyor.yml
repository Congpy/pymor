environment:
  matrix:
    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON_VERSION: "2.7" # currently 2.7.12
      PYTHON_ARCH: "32"
      CONDA: "C:\\Miniconda"

    - PYTHON_VERSION: "2.7" # currently 2.7.12
      PYTHON_ARCH: "64"
      CONDA: "C:\\Miniconda-x64"

    - PYTHON_VERSION: "3.4" # currently 3.4.4
      PYTHON_ARCH: "32"
      CONDA: "C:\\Miniconda3"

    - PYTHON_VERSION: "3.4" # currently 3.4.4
      PYTHON_ARCH: "64"
      CONDA: "C:\\Miniconda3-x64"



install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }

  - "set PATH=%CONDA%;%CONDA%\\Scripts;%PATH%"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - "conda create -q -n test-environment python=%PYTHON_VERSION% numpy scipy nose"
  # virtualenv activation
  - activate test-environment

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - pip install -r requirements.txt
  - pip install -r requirements-travis.txt
  - pip install -r requirements-optional.txt

build_script:
  # Build the compiled extension
  - python setup.py build_ext -i

test_script:
  # Run the project tests
  - "set PYTHONPATH=%cd%\\src;%PYTHONPATH%"

#after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  #- path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
